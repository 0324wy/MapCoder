{"task_id": "HumanEval/0", "prompt": "from typing import List\n\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n    \"\"\"\n", "entry_point": "has_close_elements", "canonical_solution": "    for idx, elem in enumerate(numbers):\n        for idx2, elem2 in enumerate(numbers):\n            if idx != idx2:\n                distance = abs(elem - elem2)\n                if distance < threshold:\n                    return True\n\n    return False\n", "test": "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == True\n    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == False\n    assert candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) == True\n    assert candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) == False\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == True\n    assert candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == True\n    assert candidate([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) == False\n\n", "sample_io": ["assert has_close_elements([1.0, 2.0, 3.0], 0.5) == False", "assert has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) == True"], "source_codes": ["\nfrom typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    numbers.sort()\n    prev_num = numbers[0]\n    for num in numbers[1:]:\n        if num - prev_num < threshold:\n            return True\n        prev_num = num\n    return False\n\nassert not has_close_elements([1.0, 2.0, 3.0], 0.5)\nassert has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\n\n"], "responses": ["\nfrom typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    numbers.sort()\n    prev_num = numbers[0]\n    for num in numbers[1:]:\n        if num - prev_num < threshold:\n            return True\n        prev_num = num\n    return False\n\nassert not has_close_elements([1.0, 2.0, 3.0], 0.5)\nassert has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\n\n"], "prompt_tokens": [5690], "completion_tokens": [3016], "no_of_try": 1, "api_calls": 8, "is_solved": true, "language": "Python3"}
{"task_id": "HumanEval/1", "prompt": "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n", "entry_point": "separate_paren_groups", "canonical_solution": "    result = []\n    current_string = []\n    current_depth = 0\n\n    for c in paren_string:\n        if c == '(':\n            current_depth += 1\n            current_string.append(c)\n        elif c == ')':\n            current_depth -= 1\n            current_string.append(c)\n\n            if current_depth == 0:\n                result.append(''.join(current_string))\n                current_string.clear()\n\n    return result\n", "test": "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') == [\n        '(()())', '((()))', '()', '((())()())'\n    ]\n    assert candidate('() (()) ((())) (((())))') == [\n        '()', '(())', '((()))', '(((())))'\n    ]\n    assert candidate('(()(())((())))') == [\n        '(()(())((())))'\n    ]\n    assert candidate('( ) (( )) (( )( ))') == ['()', '(())', '(()())']\n", "sample_io": ["assert separate_paren_groups('( ) (( )) (( )( ))') == ['()', '(())', '(()())']"], "source_codes": ["\nfrom typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    result = []\n    current_group = \"\"\n    open_count = 0\n    for char in paren_string:\n        if char == \"(\":\n            current_group += char\n            open_count += 1\n        elif char == \")\":\n            open_count -= 1\n            current_group += char\n            if open_count == 0:\n                result.append(current_group)\n                current_group = \"\"\n    return result\n\n\n"], "responses": ["\nfrom typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    result = []\n    current_group = \"\"\n    open_count = 0\n    for char in paren_string:\n        if char == \"(\":\n            current_group += char\n            open_count += 1\n        elif char == \")\":\n            open_count -= 1\n            current_group += char\n            if open_count == 0:\n                result.append(current_group)\n                current_group = \"\"\n    return result\n\n\n"], "prompt_tokens": [6174], "completion_tokens": [3370], "no_of_try": 1, "api_calls": 8, "is_solved": true, "language": "Python3"}
{"task_id": "HumanEval/2", "prompt": "\n\ndef truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n", "entry_point": "truncate_number", "canonical_solution": "    return number % 1.0\n", "test": "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(3.5) == 0.5\n    assert abs(candidate(1.33) - 0.33) < 1e-6\n    assert abs(candidate(123.456) - 0.456) < 1e-6\n", "sample_io": ["assert truncate_number(3.5) == 0.5"], "source_codes": ["def truncate_number(number: float) -> float:\n    return number - int(number)"], "responses": ["def truncate_number(number: float) -> float:\n    return number - int(number)"], "prompt_tokens": [4539], "completion_tokens": [2407], "no_of_try": 1, "api_calls": 8, "is_solved": true, "language": "Python3"}
{"task_id": "HumanEval/3", "prompt": "from typing import List\n\n\ndef below_zero(operations: List[int]) -> bool:\n    \"\"\" You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n    at that point function should return True. Otherwise it should return False.\n    >>> below_zero([1, 2, 3])\n    False\n    >>> below_zero([1, 2, -4, 5])\n    True\n    \"\"\"\n", "entry_point": "below_zero", "canonical_solution": "    balance = 0\n\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n\n    return False\n", "test": "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([]) == False\n    assert candidate([1, 2, -3, 1, 2, -3]) == False\n    assert candidate([1, 2, -4, 5, 6]) == True\n    assert candidate([1, -1, 2, -2, 5, -5, 4, -4]) == False\n    assert candidate([1, -1, 2, -2, 5, -5, 4, -5]) == True\n    assert candidate([1, -2, 2, -2, 5, -5, 4, -4]) == True\n", "sample_io": ["assert below_zero([1, 2, 3]) == False", "assert below_zero([1, 2, -4, 5]) == True"], "source_codes": ["\nfrom typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    current_balance = 0\n    min_balance = 0\n    \n    for operation in operations:\n        current_balance += operation\n        min_balance = min(min_balance, current_balance)\n        \n        if current_balance < 0:\n            return True\n    \n    return False\n\n\n"], "responses": ["\nfrom typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    current_balance = 0\n    min_balance = 0\n    \n    for operation in operations:\n        current_balance += operation\n        min_balance = min(min_balance, current_balance)\n        \n        if current_balance < 0:\n            return True\n    \n    return False\n\n\n"], "prompt_tokens": [6164], "completion_tokens": [3027], "no_of_try": 1, "api_calls": 8, "is_solved": true, "language": "Python3"}
{"task_id": "HumanEval/4", "prompt": "from typing import List\n\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\n", "entry_point": "mean_absolute_deviation", "canonical_solution": "    mean = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) for x in numbers) / len(numbers)\n", "test": "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert abs(candidate([1.0, 2.0, 3.0]) - 2.0/3.0) < 1e-6\n    assert abs(candidate([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n    assert abs(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0/5.0) < 1e-6\n\n", "sample_io": ["assert mean_absolute_deviation([1.0, 2.0, 3.0, 4.0]) == 1.0"], "source_codes": ["\nfrom typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    absolute_diff_sum = sum(abs(num - mean) for num in numbers)\n    return absolute_diff_sum / len(numbers)\n\n\n"], "responses": ["\nfrom typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    absolute_diff_sum = sum(abs(num - mean) for num in numbers)\n    return absolute_diff_sum / len(numbers)\n\n\n"], "prompt_tokens": [5626], "completion_tokens": [2722], "no_of_try": 1, "api_calls": 8, "is_solved": true, "language": "Python3"}
{"task_id": "HumanEval/5", "prompt": "from typing import List\n\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    \"\"\" Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\n", "entry_point": "intersperse", "canonical_solution": "    if not numbers:\n        return []\n\n    result = []\n\n    for n in numbers[:-1]:\n        result.append(n)\n        result.append(delimeter)\n\n    result.append(numbers[-1])\n\n    return result\n", "test": "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([], 7) == []\n    assert candidate([5, 6, 3, 2], 8) == [5, 8, 6, 8, 3, 8, 2]\n    assert candidate([2, 2, 2], 2) == [2, 2, 2, 2, 2]\n", "sample_io": ["assert intersperse([], 4) == []", "assert intersperse([1, 2, 3], 4) == [1, 4, 2, 4, 3]"], "source_codes": ["from typing import List\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    result = []\n    for i, num in enumerate(numbers):\n        result.append(num)\n        if i < len(numbers) - 1:\n            result.append(delimeter)\n    return result\n\ndef max_subarray_sum(numbers: List[int]) -> int:\n    max_sum = float('-inf')\n    current_sum = 0\n    for num in numbers:\n        current_sum = max(num, current_sum + num)\n        max_sum = max(max_sum, current_sum)\n    return max_sum\n\ndef first_duplicate(numbers: List[int]) -> int:\n    seen = set()\n    for num in numbers:\n        if num in seen:\n            return num\n        seen.add(num)\n    return None"], "responses": ["from typing import List\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    result = []\n    for i, num in enumerate(numbers):\n        result.append(num)\n        if i < len(numbers) - 1:\n            result.append(delimeter)\n    return result\n\ndef max_subarray_sum(numbers: List[int]) -> int:\n    max_sum = float('-inf')\n    current_sum = 0\n    for num in numbers:\n        current_sum = max(num, current_sum + num)\n        max_sum = max(max_sum, current_sum)\n    return max_sum\n\ndef first_duplicate(numbers: List[int]) -> int:\n    seen = set()\n    for num in numbers:\n        if num in seen:\n            return num\n        seen.add(num)\n    return None"], "prompt_tokens": [5394], "completion_tokens": [3526], "no_of_try": 1, "api_calls": 8, "is_solved": true, "language": "Python3"}
